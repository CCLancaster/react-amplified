type Todo @model {
  id: ID!
  name: String!
  description: String
}

type AcademicYearStatus {
  academicYear: AcademicYear
  financialAidStatus: String
  studentStatus: String
}

##################
# ACADEMIC YEAR MODEL
#################
type AcademicYear @model {
  id: ID!
  year: String
  isActive: Boolean
}

#############
# CLASS MODEL
#############
type Class @model @key(name: "studentClass", fields: ["studentID"]) {
  id: ID!
  awarded: Int
  classNumber: String
  className: String
  fees: Int
  invoice: Boolean
  paid: Boolean
  paidDate: String
  quarter: String
  reimbursed: Boolean
  reimbursedDate: String
  status: String
  tuition: Int
  undetermined: Int
  voucher: Int

  studentID: ID
  academicID: ID!
  academicYear: AcademicYear @connection(fields:["academicID"])
}


################
# DOCUMENT MODEL
################
type Document 
  @model 
  @key(name:"studentDocument", fields:["studentID"]) 
{
  id: ID!
  link: String
  title: String
  studentID: ID!
  student: Student @connection(fields:["studentID"])
}

############
# NOTE MODEL
############
type Note @model @key(name:"userNote", fields:["userID"]) @key(name:"studentNote", fields:["studentID"]) {
  id: ID!
  bookmark: Boolean
  createdDate: String
  note: String

  userID: ID!
  studentID: ID!
  user: User @connection(fields:["userID"])
  student: Student @connection(fields:["studentID"])
}

##################
# QUICK LINK MODEL
##################
type QuickLink @model @key(name:"userQL", fields:["userID"]) {
  id: ID!
  title: String
  link: String

  userID: ID
}

################
# STUDENT MODELS
################
type Student @model {
  id: ID!
  archiveStudent: Boolean
  dateOfBirth: String
  docNum: Int
  fafsaReceived: Boolean
  firstName: String
  lastName: String
  newStudent: Boolean
  race: String
  readyToAward: Boolean
  runwayCohort: String
  sentToAccounting: Boolean
  ubbId: String
  academicYearStatus: [AcademicYearStatus]
  gpa: StudentGpaInput
  location: StudentLocationInput
  
  classes: [Class] @connection(keyName: "studentClass", fields: ["id"])
  documents: [Document] @connection(keyName: "studentDocument", fields:["id"])
  notes: [Note] @connection(keyName: "studentNote", fields:["id"])
  tasks: [Task] @connection(keyName: "studentTask", fields:["id"])
}

type StudentGpaInput {
  value: Float
  asOfDate: String
}

type StudentLocationInput {
  name: String
  asOfDate: String
}

############
# TASK MODEL
############
type Task @model @key(name:"studentTask", fields:["studentID"]) @key(name:"userTask", fields:["userID"]) {
  id: ID!
  assignedDate: String
  completed: Boolean
  completedDate: String
  detail: String
  document: String
  dueDate: String
  flag: Boolean
  
  studentID: ID!
  student: Student @connection(fields:["studentID"])
  userID: ID!
  user: User @connection(fields:["userID"])
}

############
# USER MODEL
############
type User @model {
  id: ID!
  admin: Boolean
  avatar: String
  email: String!
  color: String
  firstName: String!
  lastName: String!
  token: String
  notes: [Note] @connection(keyName:"userNote", fields:["id"])
  quickLinks: [QuickLink] @connection(keyName:"userQL", fields:["id"])
  tasks: [Task] @connection(keyName:"userTask", fields:["id"])
}